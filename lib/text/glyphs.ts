export type GlyphMatrix = [number, number][]

export const SPACE_WIDTH = 1

/* 
ABCDEFGHIJKLM
NOPQRSTUVWXYZ
0123456789
`~!@^*()-_=+[]
{}\|/?<>.,;:'
*/
const glyphs: Record<string, GlyphMatrix> = {
  A: [
    [1, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [2, 3],
  ],
  B: [
    [0, 0],
    [1, 0],
    [0, 1],
    [1, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  C: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  D: [
    [0, 0],
    [1, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
  ],
  E: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [1, 1],
    [0, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  F: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [0, 2],
    [1, 2],
    [0, 3],
  ],
  G: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  H: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [2, 3],
  ],
  I: [
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
  ],
  J: [
    [2, 0],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  K: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [0, 3],
    [2, 3],
  ],
  L: [
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  M: [
    [0, 0],
    [2, 0],
    [0, 1],
    [1, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [2, 3],
  ],
  N: [
    [0, 0],
    [1, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [2, 3],
  ],
  O: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  P: [
    [0, 0],
    [1, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [0, 3],
  ],
  Q: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [2, 3],
  ],
  R: [
    [0, 0],
    [1, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [0, 3],
    [2, 3],
  ],
  S: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  T: [
    [0, 0],
    [1, 0],
    [2, 0],
    [1, 1],
    [1, 2],
    [1, 3],
  ],
  U: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  V: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [1, 3],
  ],
  W: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  X: [
    [0, 0],
    [2, 0],
    [1, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [2, 3],
  ],
  Y: [
    [0, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [1, 2],
    [1, 3],
  ],
  Z: [
    [0, 0],
    [1, 0],
    [2, 0],
    [1, 1],
    [0, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  0: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  1: [
    [0, 0],
    [1, 0],
    [1, 1],
    [1, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  2: [
    [0, 0],
    [1, 0],
    [2, 0],
    [2, 1],
    [0, 2],
    [1, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  3: [
    [0, 0],
    [1, 0],
    [2, 0],
    [1, 1],
    [2, 1],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  4: [
    [0, 0],
    [2, 0],
    [0, 1],
    [1, 1],
    [2, 1],
    [2, 2],
    [2, 3],
  ],
  5: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  6: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  7: [
    [0, 0],
    [1, 0],
    [2, 0],
    [2, 1],
    [1, 2],
    [1, 3],
  ],
  8: [
    [0, 0],
    [1, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  9: [
    [1, 0],
    [2, 0],
    [0, 1],
    [2, 1],
    [1, 2],
    [2, 2],
    [2, 3],
  ],
  '/': [
    [2, 0],
    [1, 1],
    [1, 2],
    [0, 3],
  ],
  '\\': [
    [0, 0],
    [1, 1],
    [1, 2],
    [2, 3],
  ],
  '*': [
    [1, 0],
    [0, 1],
    [1, 1],
    [2, 1],
    [1, 2],
  ],
  '?': [
    [0, 0],
    [1, 0],
    [2, 0],
    [1, 1],
    [2, 1],
    [1, 3],
  ],
  '!': [
    [0, 0],
    [0, 1],
    [0, 3],
  ],
  ',': [
    [1, 2],
    [0, 3],
  ],
  "'": [
    [1, 0],
    [0, 1],
  ],
  ';': [
    [1, 0],
    [1, 2],
    [0, 3],
  ],
  ':': [
    [0, 0],
    [0, 2],
  ],
  '(': [
    [1, 0],
    [0, 1],
    [0, 2],
    [1, 3],
  ],
  ')': [
    [1, 0],
    [2, 1],
    [2, 2],
    [1, 3],
  ],
  '-': [
    [0, 2],
    [1, 2],
    [2, 2],
  ],
  _: [
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  '=': [
    [0, 1],
    [1, 1],
    [2, 1],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  '+': [
    [1, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [1, 3],
  ],
  '~': [
    [1, 1],
    [0, 2],
    [2, 2],
  ],
  '^': [
    [1, 0],
    [0, 1],
    [2, 1],
  ],
  '>': [
    [1, 1],
    [2, 2],
    [1, 3],
  ],
  '<': [
    [1, 1],
    [0, 2],
    [1, 3],
  ],
  '@': [
    [0, 0],
    [1, 0],
    [2, 0],
    [2, 1],
    [0, 2],
    [1, 2],
    [2, 2],
    [0, 3],
    [1, 3],
    [2, 3],
  ],
  ']': [
    [1, 0],
    [2, 0],
    [2, 1],
    [2, 2],
    [1, 3],
    [2, 3],
  ],
  '[': [
    [0, 0],
    [1, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [1, 3],
  ],
  '}': [
    [0, 0],
    [1, 0],
    [2, 1],
    [2, 2],
    [0, 3],
    [1, 3],
  ],
  '{': [
    [1, 0],
    [2, 0],
    [0, 1],
    [0, 2],
    [1, 3],
    [2, 3],
  ],
  '|': [
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
  ],
  '.': [[0, 3]],
  '`': [
    [0, 0],
    [1, 1],
  ],
  ' ': [],
}

export const getGlyphMatrix = (char: string) => {
  if (!(char.toUpperCase() in glyphs)) throw new Error(`Invalid char: ${char}`)

  return glyphs[char.toUpperCase()]
}
